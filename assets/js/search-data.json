{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hashtag.ru/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "How to deal with csv, import to sql and so on",
            "content": "Let’s do it something with CSV ;) Let’s talk today how to deal with CSV. and pandas will help us. . import pandas as pd . There is good package for pandas - swifter A package which efficiently applies any function to a pandas dataframe or series in the fastest available manner. . # !pip install swifter . I’ve already installed package, that’s why code was commented above. . import swifter . Also we can treat with pandas dataframe like sql data. For that we need another one package - pandasql. For installing: !pip install pandasql . . import pandasql as ps %load_ext sql . The sql extension is already loaded. To reload it, use: %reload_ext sql . url = &quot;&quot;&quot;https://raw.githubusercontent.com/NLPH/NLPH_Resources/master/code/VerbInflector/resources/The%20Verb%20Index.csv&quot;&quot;&quot; . col_names = [&quot;name&quot;, &quot;binyan&quot;, &quot;type&quot;] df = pd.read_csv(url, error_bad_lines=False,header=None, skipinitialspace=True, names=col_names, dtype={&#39;binyan&#39;:&#39;category&#39;}) df.head(2) . name binyan type . 0 | אבד | A | 16 | . 1 | אבזר | C | 20 | . unique values in the each columns . pd.DataFrame.from_records([(col, df[col].nunique()) for col in df.columns], columns=[&#39;Column_Name&#39;, &#39;Num_Unique&#39;]).sort_values(by=[&#39;Num_Unique&#39;]) . Column_Name Num_Unique . 1 | binyan | 7 | . 2 | type | 60 | . 0 | name | 3530 | . We could replace or map values of a column to values, that are more convenient for us . labels = df[&#39;binyan&#39;].astype(&#39;category&#39;).cat.categories.tolist() replace_map = {&#39;binyan&#39; : {k: v for k,v in zip(labels,list(range(1,len(labels)+1)))}} replace_map . {&#39;binyan&#39;: {&#39;A&#39;: 1, &#39;B&#39;: 2, &#39;C&#39;: 3, &#39;D&#39;: 4, &#39;E&#39;: 5, &#39;F&#39;: 6, &#39;G&#39;: 7}} . replace_map_name = {&#39;binyan&#39;: {&#39;A&#39;: &#39;paal&#39;, &#39;B&#39;: &#39;nifal&#39;, &#39;C&#39;: &#39;piel&#39;, &#39;D&#39;: &#39;pual&#39;, &#39;E&#39;: &#39;hitpael&#39;, &#39;F&#39;: &#39;hifil&#39;, &#39;G&#39;: &#39;hufal&#39;}} . df.replace(replace_map_name, inplace=True) df . name binyan type . 0 | אבד | paal | 16 | . 1 | אבזר | piel | 20 | . 2 | אבחן | piel | 25 | . 3 | אבטח | piel | 26 | . 4 | אגד | paal | 14 | . ... | ... | ... | ... | . 4242 | תרגם | piel | 20 | . 4243 | תרם | paal | 1 | . 4244 | תשאל | piel | 24 | . 4245 | תש | paal | 40 | . 4246 | תשש | paal | 1 | . 4247 rows × 3 columns . q1 = &quot;&quot;&quot;SELECT * FROM df WHERE binyan=&#39;paal&#39; and name LIKE &#39;א%&#39; &quot;&quot;&quot; ps.sqldf(q1, locals()).head(10) . name binyan type . 0 | אבד | paal | 16 | . 1 | אגד | paal | 14 | . 2 | אגף | paal | 14 | . 3 | אגר | paal | 14 | . 4 | אהב | paal | 21 | . 5 | אהד | paal | 20 | . 6 | אזל | paal | 15 | . 7 | אזר | paal | 14 | . 8 | אחז | paal | 20 | . 9 | אטם | paal | 14 | . We could get data also from sql database. For example from postgresql. Sure, we need install drivers’ packages. !pip install psycopg2 , !pip install pyodbc. And let’s connect (it’s just connection string: database_driver://user:password@host/dbname ): . %sql postgresql+psycopg2://postgres:123@localhost/hebrew . &#39;Connected: postgres@hebrew&#39; . result = %sql SELECT * FROM generate_series(&#39;2020-01-01 00:00&#39;::timestamp, &#39;2020-02-04 12:00&#39;, &#39;10 hours&#39;) as date; df = result.DataFrame() . * postgresql+psycopg2://postgres:***@localhost/hebrew 83 rows affected. . df.head(5) . date . 0 | 2020-01-01 00:00:00 | . 1 | 2020-01-01 10:00:00 | . 2 | 2020-01-01 20:00:00 | . 3 | 2020-01-02 06:00:00 | . 4 | 2020-01-02 16:00:00 | . As we see, it’s really easy to get data to dataframe. . url = &quot;&quot;&quot;https://raw.githubusercontent.com/NLPH/NLPH_Resources/master/code/VerbInflector/resources/Inflected%20verbs%20Extended.txt&quot;&quot;&quot; . col_names = [&quot;binyan&quot;, &quot;type&quot;, &quot;inflection&quot;, &quot;properties&quot;, &quot;verb&quot;] df_infl = pd.read_csv(url, error_bad_lines=False,header=None, skipinitialspace=True, names=col_names, dtype={&#39;binyan&#39;:&#39;category&#39;}) df_infl.head(2) . binyan type inflection properties verb . 0 | A | 1 | בָּגַדְתִּי | PAST+FIRST+MF+SINGULAR+COMPLETE | בָּגַד | . 1 | A | 1 | בָּגַדְתָּ | PAST+SECOND+M+SINGULAR+COMPLETE | בָּגַד | . In the properties column we have data with ‘+’ separator. But we want to split it. Let’s do it: . df_infl[[&#39;form&#39;,&#39;number&#39;, &#39;gender&#39;, &#39;number&#39;, &#39;property&#39;]] = df_infl[&#39;properties&#39;].str.split(&#39;+&#39;,expand=True) . df_infl.head(2) . binyan type inflection properties verb form number gender property . 0 | A | 1 | בָּגַדְתִּי | PAST+FIRST+MF+SINGULAR+COMPLETE | בָּגַד | PAST | SINGULAR | MF | COMPLETE | . 1 | A | 1 | בָּגַדְתָּ | PAST+SECOND+M+SINGULAR+COMPLETE | בָּגַד | PAST | SINGULAR | M | COMPLETE | . And we can push it to our sql server really easy . import sqlalchemy database_username = &#39;username&#39; database_password = &#39;password&#39; database_ip = &#39;host&#39; database_name = &#39;dbname&#39; conn = sqlalchemy.create_engine(&#39;postgresql+psycopg2://{0}:{1}@{2}/{3}&#39;.format(database_username, database_password, database_ip, database_name)) df_infl(con=conn, name=&#39;tablename&#39;, if_exists=&#39;append&#39;) . . .",
            "url": "https://hashtag.ru/2020/01/12/pandas-helps-us-csv.html",
            "relUrl": "/2020/01/12/pandas-helps-us-csv.html",
            "date": " • Jan 12, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Deep learning Java library",
            "content": "As we’ve heard probably there is a ML toolkit based on Java, - DL4J from Eclipse. But now we have another one library for ML on Java from AWS team. And it’s good. . . I can watch endlessly dancing graphs. But let’s see, what we have. . . Amazon released Deep Java Library, an open-source library for training, testing, deploying, and making predictions with deep-learning models. . . There are jupyter’s notebooks here. Maven: . &lt;!-- https://mvnrepository.com/artifact/ai.djl.mxnet/mxnet-engine --&gt; &lt;dependency&gt; &lt;groupId&gt;ai.djl.mxnet&lt;/groupId&gt; &lt;artifactId&gt;mxnet-engine&lt;/artifactId&gt; &lt;version&gt;0.2.0&lt;/version&gt; &lt;/dependency&gt; . Deep Java Library supports training on multiple GPUs. . TrainingConfig config = new DefaultTrainingConfig(initializer, loss) .setOptimizer(optimizer) .setBatchSize(batchSize) .setDevices(Device.getDevices(1)) .addEvaluator(accuracy); . We can use setDevices and pass an array of devices we want the model to be trained on. For example, new Device[]{Device.gpu(0), Device.gpu(1)} for training on GPU0 and GPU1. .",
            "url": "https://hashtag.ru/2020/01/12/deep-learning-java.html",
            "relUrl": "/2020/01/12/deep-learning-java.html",
            "date": " • Jan 12, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Jupyter tips and tricks",
            "content": ". Magic commands&#182; . First of all, we can use built-in magic commands. The full list of commands can be obtained: . In&nbsp;[1]: %lsmagic . Out[1]: Available line magics: %alias %alias_magic %autoawait %autocall %automagic %autosave %bookmark %cd %clear %cls %colors %conda %config %connect_info %copy %ddir %debug %dhist %dirs %doctest_mode %echo %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %macro %magic %matplotlib %mkdir %more %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip %popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %ren %rep %rerun %reset %reset_selective %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics: %%! %%HTML %%SVG %%bash %%capture %%cmd %%debug %%file %%html %%javascript %%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefile Automagic is ON, % prefix IS NOT needed for line magics. . . We can use also shell commands: . In&nbsp;[2]: !ls !pwd . Untitled.ipynb iris.csv /c/temp_folder . . It can be useful, for example if we want to use some fast shell command like sed, awk or just . In&nbsp;[5]: #first 10 lines of the file: !head -2 iris.csv . 5.1,3.5,1.4,0.2,Iris-setosa 4.9,3.0,1.4,0.2,Iris-setosa . In&nbsp;[11]: #how to find a specific line with a string using grep: !grep -m2 -i &#39;versicolor&#39; &#39;iris.csv&#39; . 7.0,3.2,4.7,1.4,Iris-versicolor 6.4,3.2,4.5,1.5,Iris-versicolor . In&nbsp;[13]: #replace string, where searchingStr, newStr are searching string and new string respectively: !sed -e &#39;s/setosa/versicolor/g&#39; &#39;iris.csv&#39; . 5.1,3.5,1.4,0.2,Iris-versicolor 4.9,3.0,1.4,0.2,Iris-versicolor 4.7,3.2,1.3,0.2,Iris-versicolor 4.6,3.1,1.5,0.2,Iris-versicolor 5.0,3.6,1.4,0.2,Iris-versicolor 5.4,3.9,1.7,0.4,Iris-versicolor 4.6,3.4,1.4,0.3,Iris-versicolor 5.0,3.4,1.5,0.2,Iris-versicolor 4.4,2.9,1.4,0.2,Iris-versicolor 4.9,3.1,1.5,0.1,Iris-versicolor 5.4,3.7,1.5,0.2,Iris-versicolor 4.8,3.4,1.6,0.2,Iris-versicolor 4.8,3.0,1.4,0.1,Iris-versicolor 4.3,3.0,1.1,0.1,Iris-versicolor 5.8,4.0,1.2,0.2,Iris-versicolor 5.7,4.4,1.5,0.4,Iris-versicolor 5.4,3.9,1.3,0.4,Iris-versicolor 5.1,3.5,1.4,0.3,Iris-versicolor 5.7,3.8,1.7,0.3,Iris-versicolor 5.1,3.8,1.5,0.3,Iris-versicolor 5.4,3.4,1.7,0.2,Iris-versicolor 5.1,3.7,1.5,0.4,Iris-versicolor 4.6,3.6,1.0,0.2,Iris-versicolor 5.1,3.3,1.7,0.5,Iris-versicolor 4.8,3.4,1.9,0.2,Iris-versicolor . . All of this beauty we can use as variable in our notebook: . In&nbsp;[16]: files = !ls ./*.csv files[0] . Out[16]: &#39;./iris.csv&#39; . . Very powerfull command is psource, that can show us signature of functions and source code. Also we can use command ?, ?? for that. For capturing output from pager to our notebook we can overload method (also see, stackoverflow&#39;s discussion about it.): . In&nbsp;[24]: from __future__ import print_function from IPython.core import page page.page = print . In&nbsp;[26]: %psource %psource . @line_magic def psource(self, parameter_s=&#39;&#39;, namespaces=None): &#34;&#34;&#34;Print (or run through pager) the source code for an object.&#34;&#34;&#34; if not parameter_s: raise UsageError(&#39;Missing object name.&#39;) self.shell._inspect(&#39;psource&#39;,parameter_s, namespaces) . If we want to run other python file or even notebook file (*.ipynb), command %run helps us. . In&nbsp;[&nbsp;]: .",
            "url": "https://hashtag.ru/2019/11/21/jupyter.html",
            "relUrl": "/2019/11/21/jupyter.html",
            "date": " • Nov 21, 2019"
        }
        
    
  
    
        ,"post4": {
            "title": "A little bit about vscode and about yet another plugin",
            "content": "I use a bunch of vscode plugins, there are a lot of resources about it, but I recommend this one Great plugin, just couple press of button, and we can include some js libraries in our protype (in production system it’s better use spaceship webpack and etc.) But one day I just typed some code, and found out that cdnjs (that plugin above uses) don’t cover all of set js libraries, especially libraries that built on npm. Of course we can use npm, . but I decided it’s better to have the same plugin, that uses unpkg And here it is .",
            "url": "https://hashtag.ru/2019/11/15/about-vscode.html",
            "relUrl": "/2019/11/15/about-vscode.html",
            "date": " • Nov 15, 2019"
        }
        
    
  
    
        ,"post5": {
            "title": "First post, generate all permutations of string",
            "content": "Hi, everyone! I’ve started my own blog;) . . It’s first post about banal old exercise, given a string, generate all permutations of it Here’s solution on java . public static Stream&lt;List&lt;String&gt;&gt; permute(List&lt;String&gt; input) { if (input.size() == 1) { return Stream.of(input); } else { return input.stream().flatMap(el -&gt; permute(input.stream().filter(j -&gt; j != el).collect(toList())) .peek(l -&gt; l.add(0, el))); } } .",
            "url": "https://hashtag.ru/2019/10/15/first_post.html",
            "relUrl": "/2019/10/15/first_post.html",
            "date": " • Oct 15, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hashtag.ru/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hashtag.ru/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}